{"version":3,"sources":["ImagePicker.js","MemePreview.js","TextInput.js","MemeEditor.js","App.js","serviceWorker.js","index.js"],"names":["ImagePicker","selectImage","this","props","react_default","a","createElement","className","src","alt","onClick","Component","MemePreview","_this$props","image","topText","bottomText","TextInput","setTopText","setBottomText","type","value","onChange","placeholder","MemeEditor","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","e","setState","target","newTopText","newBottomText","state","src_ImagePicker_0","src_MemePreview_0","src_TextInput_0","App","src_MemeEditor_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4ded1c65.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './ImagePicker.css';\r\n// import Images from '../Images';\r\n\r\nclass ImagePicker extends Component {\r\n    render() {\r\n        const { selectImage } = this.props;\r\n        return (\r\n            <div className=\"imagePicker\">\r\n                <h2>Select a picture:</h2>\r\n                <div className=\"imageChoices\">\r\n                    <img src=\"/Images/Bird.jpg\" alt=\"bird\" className=\"selectedPic\" onClick={selectImage} />\r\n                    <img src=\"Images/Cat.jpg\" alt=\"cat\" className=\"selectedPic\" onClick={selectImage} />\r\n                    <img src=\"/Images/Dog.jpg\" alt=\"dog\" className=\"selectedPic\" onClick={selectImage} />\r\n                    <img src=\"/Images/Girl.jpg\" alt=\"girl\" className=\"selectedPic\" onClick={selectImage} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ImagePicker;","import React, { Component } from 'react';\r\nimport \"./MemePreview.css\";\r\n\r\nclass MemePreview extends Component {\r\n    render() {\r\n        const { image, topText, bottomText } = this.props;\r\n        return (\r\n            <div className=\"memePreview\">\r\n                <img src={image} alt=\"\" />\r\n                <div className=\"textTop\">\r\n                    {topText}\r\n                </div>\r\n                <div className=\"textBottom\">\r\n                    {bottomText}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MemePreview;","import React, { Component } from 'react';\r\nimport \"./TextInput.css\"\r\n\r\nclass TextInput extends Component {\r\n\r\n    render() {\r\n        const { setTopText, setBottomText, topText, bottomText } = this.props;\r\n        return (\r\n            <div className=\"textInput\">\r\n                <h2>Add Text:</h2>\r\n                <div className=\"inputRow\"> \r\n                    <input\r\n                        type=\"text\"\r\n                        value={topText}\r\n                        onChange={setTopText}\r\n                        placeholder=\"Enter Top Text Here\"\r\n                    />\r\n\r\n                    <input\r\n                        type=\"text\"\r\n                        value={bottomText}\r\n                        onChange={setBottomText}\r\n                        placeholder=\"Enter Bottom Text Here\"\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TextInput;","import React, { Component } from 'react';\r\nimport ImagePicker from './ImagePicker';\r\nimport MemePreview from './MemePreview';\r\nimport TextInput from './TextInput';\r\nimport './MemeEditor.css';\r\n\r\nclass MemeEditor extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            image: \"/Images/Bird.jpg\",            \r\n            topText: '',\r\n            bottomText: ''\r\n        }\r\n    }\r\n    selectImage = (e) => {\r\n        //console.log(e.target.src);\r\n        this.setState({ image: e.target.src })\r\n    }\r\n    setTopText = (e) => {\r\n        const newTopText = e.target.value;\r\n        this.setState({ topText: newTopText })\r\n    }\r\n\r\n    setBottomText = (e) => {\r\n        const newBottomText = e.target.value;\r\n        this.setState({ bottomText: newBottomText })\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <h1>Meme-Generator</h1>\r\n                <ImagePicker className=\"imagePicker\"\r\n                    selectImage={this.selectImage}\r\n                />\r\n                <MemePreview className=\"memePreview\"\r\n                    image={this.state.image}\r\n                    topText={this.state.topText}\r\n                    bottomText={this.state.bottomText}\r\n                />\r\n                <TextInput className=\"textInput\"\r\n                    setTopText={this.setTopText}\r\n                    setBottomText={this.setBottomText}\r\n                    topText={this.state.topText}\r\n                    bottomText={this.state.bottomText}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default MemeEditor;","import React, { Component } from 'react';\nimport MemeEditor from './MemeEditor';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <MemeEditor />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n/*ReactDOM.render(<Router basename={process.env.PUBLIC_URL}>< App /></Router>, document.getElementById('root'));*/\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}